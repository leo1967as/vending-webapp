import { useState, useEffect } from 'react';

const API_URL = "http://localhost:3000/api";

export default function useVendingMachine() {
  const [products, setProducts] = useState([]);
  const [insertedMoney, setInsertedMoney] = useState(0);
  const [change, setChange] = useState(0);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [message, setMessage] = useState('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡πÄ‡∏á‡∏¥‡∏ô');
  const [loading, setLoading] = useState(false);

  // üîÑ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ
  useEffect(() => {
    fetch(`${API_URL}/products`)
      .then(res => res.json())
      .then(data => setProducts(data))
      .catch(err => {
        console.error('‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', err);
        setMessage('‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä');
      });
  }, []);

  // ... (‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)

  const insertCoin = (amount) => {
    setInsertedMoney(insertedMoney + amount);
    setMessage(`‡πÉ‡∏™‡πà‡πÄ‡∏á‡∏¥‡∏ô ${amount} ‡∏ö‡∏≤‡∏ó ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô ${insertedMoney + amount} ‡∏ö‡∏≤‡∏ó`);
  };

  const selectProduct = (product) => {
    setSelectedProduct(product);
    setMessage(`‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ${product.name} ‡∏£‡∏≤‡∏Ñ‡∏≤ ${product.price} ‡∏ö‡∏≤‡∏ó`);
  };

  const dispenseProduct = async (productId) => {
    setLoading(true);
    try {
      const response = await fetch(`${API_URL}/dispense/${productId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action: 'dispense' })
      });
      if (!response.ok) throw new Error('‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤:', error);
      throw error;
    } finally {
      setLoading(false);
    }
  };

const purchaseProduct = async () => {
  if (!selectedProduct) {
    setMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô');
    return;
  }

  if (selectedProduct.quantity <= 0) {
    setMessage('‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î');
    return;
  }

  if (insertedMoney < selectedProduct.price) {
    setMessage(`‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å ${selectedProduct.price - insertedMoney} ‡∏ö‡∏≤‡∏ó`);
    return;
  }

  setMessage(`üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡πà‡∏≤‡∏¢ ${selectedProduct.name}...`);
  setLoading(true);

  try {
    // üü¢ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ù‡∏±‡πà‡∏á backend ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ quantity ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á)
    const response = await fetch(`${API_URL}/dispense/${selectedProduct.id}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ action: 'dispense' })
    });

    const result = await response.json();

    if (!result.success) {
      throw new Error(result.message || '‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
    }

    // üïê ‡∏£‡∏≠ 1.5 ‡∏ß‡∏¥ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á)
    await new Promise(resolve => setTimeout(resolve, 1500));

    // üîÅ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å API
    const refreshed = await fetch(`${API_URL}/products`).then(res => res.json());
    setProducts(refreshed);

    // üí∞ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô + ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    setChange(insertedMoney - selectedProduct.price);
    setMessage(`‚úÖ ‡∏à‡πà‡∏≤‡∏¢ ${selectedProduct.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô ${insertedMoney - selectedProduct.price} ‡∏ö‡∏≤‡∏ó`);
    setInsertedMoney(0);
    setSelectedProduct(null);
  } catch (error) {
    setMessage(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${error.message}`);
  } finally {
    setLoading(false);
  }
};

  const getChange = () => {
    setMessage(`‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô ${change} ‡∏ö‡∏≤‡∏ó`);
    setChange(0);
  };

  return {
    products, insertedMoney, change, selectedProduct, loading, message,
    insertCoin, selectProduct, purchaseProduct, getChange
  };
}
