// üìÑ backend/routes/motorMapping.js
import express from 'express';
import db from '../db.js';

const router = express.Router();

// üîπ GET: ‡∏î‡∏∂‡∏á mapping ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get('/', async (req, res) => {
  await db.read();
  res.json(db.data.mappings || {});
});

// üî∏ PUT: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï mapping ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GPIO ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
router.put('/:gpio', async (req, res) => {
  const gpio = req.params.gpio;
  const { productId } = req.body;

  await db.read();
  db.data.mappings ||= {};
  db.data.mappings[gpio] = productId;
  await db.write();

  res.json({ success: true, gpio, productId });
});

// üî∏ PUT: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï mapping ‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢ GPIO ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
router.put('/bulk', async (req, res) => {
  const { motorIds, productId } = req.body;

  if (!Array.isArray(motorIds)) {
    return res.status(400).json({ success: false, message: 'motorIds ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô array' });
  }

  await db.read();
  db.data.mappings ||= {};

  motorIds.forEach(gpio => {
    db.data.mappings[gpio] = productId;
  });

  await db.write();
  res.json(db.data.mappings);
});

// üîπ POST: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô mappings ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏´‡∏°‡πà (‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
router.post('/', async (req, res) => {
  const newMappings = req.body;
  await db.read();
  db.data.mappings = newMappings;
  await db.write();

  res.json({ success: true, message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏°‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß' });
});

export default router;
